<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>叶斌的iOS Blog</description>
		<link>/</link>
		<atom:link href="/" rel="self" type="application/rss+xml" />
		
			<item>
				<title>iOS App性能优化</title>
				<description>&lt;h2 id=&quot;ios-app&quot;&gt;iOS App的性能关注点&lt;/h2&gt;
&lt;p&gt;虽然iPhone的机能越来越好，但是app的功能也越来越复杂，性能从来都是移动开发的核心关注点之一。我们说一个app性能好，不是简单指感觉运行速度快，而应该是指应用启动快速、UI反馈响应及时、列表滚动操作流畅、内存使用合理，当然更不能随随便便Crash啦。工程师开发应用时除了在设计上要避免性能“坑”的出现，在实际遇到“坑”时也要能很快定位原因所在。定位性能问题原因当然不能靠猜，合理的方法是使用工具测量评估出投资回报最高的问题点，然后再加以优化。&lt;/p&gt;

&lt;p&gt;本文会从以下几点介绍如何分析和优化iOS app的性能：启动时间、用户响应、内存、图形动画、文件和网络I/O。其中会用到Apple出品的性能分析神器“Instruments”。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;启动时间&lt;/h2&gt;
&lt;p&gt;应用启动时间长短对用户第一次体验至关重要，同时系统对应用的启动、恢复等状态的运行时间也有严格的要求，在应用超时的情况下系统会直接关闭应用。以下是几个常见场景下系统对app运行时间的要求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Launch 20秒&lt;/li&gt;
  &lt;li&gt;Resume 10秒&lt;/li&gt;
  &lt;li&gt;Suspend 10秒&lt;/li&gt;
  &lt;li&gt;Quit 6秒&lt;/li&gt;
  &lt;li&gt;Background Task 10分钟&lt;/li&gt;
  &lt;li&gt;要获取准确的app启动所需时间，最简单的方法时首先在main.c中添加如下代码：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt; CFAbsoluteTime StartTime;  
 int main(int argc, char **argv) {  
 StartTime = CFAbsoluteTimeGetCurrent(); &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后在AppDelegate的回调方法&lt;code&gt;application:didFinishLaunchingWithOptions&lt;/code&gt;中添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatch_async(dispatch_get_main_queue(), ^{
NSLog(@”Lauched in %f seconds.”,  (CFAbsoluteTimeGetCurrent() – StartTime));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能你会觉得为什么这样可拿到系统启动的时间，因为这个dispatch_async中提交的工作会在app主线程启动后的下一个run lopp中运行，此时app已经完成了载入并且将要显示第一帧画面，也就是系统会运行到-[UIApplication _reportAppLaunchFinished]之前。下图是用Instruments工具Time Profiler跑的调用栈，Instruments的使用方法建议看WWDC中与performance相关的session录像，文字写起来太单薄不够直观哈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中我们可以看到在系统调用&lt;code&gt;[UIApplication _reportAppLaunchFinished]&lt;/code&gt;之前完成了系统回调&lt;code&gt;application:didFinishLaunchingWithOptions。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;App的启动会包括以下几个部分（来自WWDC 2012 Session 235）:&lt;/p&gt;

&lt;p&gt;1）链接和载入：可以在Time Profile中显示dyld载入库函数，库会被映射到地址空间，同时完成绑定以及静态初始化。&lt;/p&gt;

&lt;p&gt;2）UIKit初始化：如果应用的Root View Controller是由XIB实现的，也会在启动时被初始化。&lt;/p&gt;

&lt;p&gt;3）应用回调：调用UIApplicationDeleagte的回调：&lt;code&gt;application:didFinishLaunchingWithOptions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4）第一次Core Animation调用：在启动后的方法&lt;code&gt;-[UIApplication _resportAppLaunchFinished]&lt;/code&gt;中调用&lt;code&gt;CA::Transaction::commit&lt;/code&gt;实现第一帧画面的绘制。&lt;/p&gt;

&lt;p&gt;如果你的程序启动很慢，能 做的首先是将与显示第一屏画面无关的操作放到之后执行；如果是用XIB文件load第一屏，XIB文件中的View层也要如果扁平，不要有太多图层。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;用户响应&lt;/h2&gt;
&lt;p&gt;如何能够让用户觉得你的app响应迅速呢？当然是app用户所触发的操作都能得到立刻响应，即用户事件(User Event)能够被主线程的run loop及时处理。什么是run loop？可以想象成一个处理事件的select多路复用。主线程中的run loop当然主要是为了处理用户产生的事件啦，例如点击、滚动等。以后我们会详细聊聊run loop这个让人迷惑的东东。&lt;/p&gt;

&lt;p&gt;要让主线程的run loop更好的响应用户事件，工程师应该尽量减少主线程干重活的时间，尤其是读文件啊，网络操作啊，大量运算啊这类重活，如果是阻塞操作，那就更是大忌了。我们可以用多线程(NSThread、NSOperationQueue, GCD，下一篇Blog就会聊到这多线程)将重活移出主线程，这属于显式并发。还有种隐式并发，例如view和layer的动画、layer的绘制以及PNG图片的解码都是在另一个子线程中执行的。除了使用多线程技术减轻主线程的负担外，减少主线程中阻塞也是提升用户体验的一个方法。使用Instruments中Time Profiler工具中的”Recod thread waiting”选项可以统计出app运行时各个线程中的阻塞系统调用情况，例如文件读写read/write，网络读写send/recv，加锁psynchmutexwait等。Instruments中的System Trace工具则能够记录所有的底层系统调用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;内存&lt;/h2&gt;
&lt;p&gt;内存问题从来都是iOS app的老大难问题，搞不好程序就爆了。由于iOS系统没有Swap文件(知道为啥不？留给悬念)，在内存不足时会将只读数据(例如code page)从内存中移出，需要的时候再从disk上读如内存；可读写数据不会被系统从内存中移出，然而如果占用的内存达到一个阈值，系统会发出相应的通知和回调让应用release对象以回收内存，如果仍然不能减少内存使用量，系统会直接关闭应用。尤其是iOS 5.0之后，如果你的app收到了memory warning，那么脑袋也是和其他app一样放在了案板上，随时有可能被kill掉，并不是说一定会先Kill掉在后台的app。&lt;/p&gt;

&lt;p&gt;App使用的内存除了我们在堆上分配的内存外（+[NSobject alloc]/malloc），还会有更多使用内存的地方，比如代码和全局数据（TEXT和DATA），线程栈，图片，view 的layer backing store等等。因此处理内存问题，绝不仅仅是我们开发app时尽量少申请内存那么简单。&lt;/p&gt;

&lt;p&gt;现在有了超炫的ARC，内存问题相对少了很多，开发效率也得到了提高。但是很多公司的项目仍然由于历史原因采用了手动管理内存，该做的活还是少不了。Xcode自带的静态分析功能可以帮你提前发现一些问题，然而有些内存问题是无法用静态分析来发现的，例如我们不断使用内存没有及时释放的问题，就无法使用静态分析器分析出来。此时可以使用Instruments的Allocations和Leaks工具来检查运行时的的内存使用以及泄露问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/3.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Allocations工具可以很直观的反应app的内存使用情况，还有个很赞“Mark Heap”功能，在上图左边下半部分中的Heapshot Analysis中。例如你在进入一个页面前点击一下“Mark Heap”，然后再退回上一页面点击一下“Mark Heap”，如果你在进出这个页面里所申请的内存都得到了合理的释放，那么堆的内存增长量就应该降至0（见上图右下部分）。&lt;/p&gt;

&lt;p&gt;另一种严重的内存使用问题是引用了已经释放的内存，直接导致应用崩溃，而Allocation有一个选项Enable NSZombie detection能够在应用使用已经释放的内存时标注出来，同时显示错误发生的调用栈信息。这为解决问题提供了最直接的帮助，当然缺点是必须能够重现EXECBADACCESS错误。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/4.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工具Leaks可以在应用运行时直接标示出存在内存泄露的代码，如果发生了内存泄露，可以从泄露详细信息中查看泄露的具体对象以及方法调用栈，大部分问题还是很好解决的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/5.png?raw=true&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;图形和动画&lt;/h2&gt;
&lt;p&gt;图形性能对用户体验有直接的影响，Instruments中的Core Animation工具用于测量物理机上的图形性能，通过视图的刷新频率大小来判断应用的图形性能。例如一个复杂的列表滚动时它的刷新率应该努力趋近于60fps才能让用户觉得够流畅，从这个数字也可以算出run loop最长的响应时间应该是16毫秒。&lt;/p&gt;

&lt;p&gt;启动Instruments的Core Animation工具后可以发现左下部分有一堆选项，我们来逐个介绍：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/6.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1) Color Blended Layers&lt;/p&gt;

&lt;p&gt;Instruments可以在物理机上显示出被混合的图层Blended Layer(用红色标注)，Blended Layer是因为这些Layer是透明的(Transparent)，系统在渲染这些view时需要将该view和下层view混合(Blend)后才能计算出该像素点的实际颜色，如果这种blended layer很多，那么在滚动列表时就甭想有流畅的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/7.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决blended layer问题也很简单，检查红色区域view的opaque属性，记得设置成YES；检查backgroundColor属性是不是[UIColor clearColor]，要知道背景颜色为clear color那可是图形性能的大敌，基本意味着blended layer是跑不了的了，为什么？自己思考一下:)&lt;/p&gt;

&lt;p&gt;2) Color Hits Green and Misses Red&lt;/p&gt;

&lt;p&gt;很多视图Layer由于Shadow、Mask和Gradient等原因渲染很高，因此UIKit提供了API用于缓存这些Layer：[layer setShouldRasterize:YES]，系统会将这些Layer缓存成Bitmap位图供渲染使用，如果失效时便丢弃这些Bitmap重新生成。图层Rasterization栅格化好处是对刷新率影响较小，坏处是删格化处理后的Bitmap缓存需要占用内存，而且当图层需要缩放时，要对删格化后的Bitmap做额外计算。&lt;/p&gt;

&lt;p&gt;使用这个选项后时，如果Rasterized的Layer失效，便会标注为红色，如果有效标注为绿色。当测试的应用频繁闪现出红色标注图层时，表明对图层做的Rasterization作用不大。&lt;/p&gt;

&lt;p&gt;3) Color Misaligned Images&lt;/p&gt;

&lt;p&gt;Misaligned Image表示要绘制的点无法直接映射到频幕上的像素点，此时系统需要对相邻的像素点做anti-aliasing反锯齿计算，增加了图形负担，通常这种问题出在对某些View的Frame重新计算和设置时产生的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/8.png?raw=true&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中被标注为黄色的图层，这是由于图层显示的是被缩放后的图片，如果这些图片是通过网络下载的，可以通过程序更新为确定的绘制大小来解决。还有些系统Navigation Bar和Tool Bar的背景图片使用的是拉伸(Streched)图片，也会被表示为黄色，这是属于正常情况，通常无需修改。这种问题一般对性能影响不大，而是可能会在边缘处虚化。&lt;/p&gt;

&lt;p&gt;(4) Color Offscreen-Rendered Yellow&lt;/p&gt;

&lt;p&gt;Offscreen-Rendering离屏渲染意思是iOS要显示一个视图时，需要先在后台用CPU计算出视图的Bitmap，再交给GPU做Onscreen-Rendering显示在屏幕上，因为显示一个视图需要两次计算，所以这种Offscreen-Rendering会导致app的图形性能下降。&lt;/p&gt;

&lt;p&gt;大部分Offscreen-Rendering都是和视图Layer的Shadow和Mask相关，下列情况会导致视图的Offscreen-Rendering：&lt;/p&gt;

&lt;p&gt;使用Core Graphics (CG开头的类)。&lt;/p&gt;

&lt;p&gt;使用drawRect()方法，即使为空。&lt;/p&gt;

&lt;p&gt;将CALayer的属性shouldRasterize设置为YES。&lt;/p&gt;

&lt;p&gt;使用了CALayer的setMasksToBounds(masks)和setShadow*(shadow)方法。&lt;/p&gt;

&lt;p&gt;在屏幕上直接显示文字，包括Core Text。&lt;/p&gt;

&lt;p&gt;设置UIViewGroupOpacity。&lt;/p&gt;

&lt;p&gt;这篇博文Designing for iOS: Graphics &amp;amp; Performance对offsreen以及图形性能有个很棒的介绍，&lt;/p&gt;

&lt;p&gt;(5) Color Copied Images&lt;/p&gt;

&lt;p&gt;Copied Image选项可以标注应用绘制时被Core Animation复制的图片，标注成蓝绿色。虽然我在运行时遇到过，不过个人感觉对图形性能影响不大。&lt;/p&gt;

&lt;p&gt;(6) Color Immediately，Flash Updated Regions， Color OpenGL Fast Path Blue&lt;/p&gt;

&lt;p&gt;Color Immediately选项表示Instruments在做color-flush操作时取消10毫秒的延时。 
Flash Updated Regions选项用于用红色示标示出在屏幕上使用GPU计算绘制的图层。 
Color OpenGL Fast Path Blue选项用于用蓝色标示出在屏幕上由OpenGL compositor绘制的内容。&lt;/p&gt;

&lt;p&gt;这三个选项对图形性能的分析意义较小，通常仅作为参考。&lt;/p&gt;

&lt;h2 id=&quot;io&quot;&gt;文件和网络I/O&lt;/h2&gt;
&lt;p&gt;如果需要对app的文件和网络I/O情况做分析，可以用到这三个Instruments工具System Usage、File Activity和Network。&lt;/p&gt;

&lt;p&gt;工具System Usage可以统计出运行状态下应用的文件和网络IO操作数据。例如我们发现应用启动后又一个峰值，这可能存在问题，我们可以利用System Usage工具的详细信息栏查看应用是由于对哪些文件的读写操作导致了峰值。&lt;/p&gt;

&lt;p&gt;工具File Activity只能在模拟器中运行，因此数据采集可能不是非常准确。它同样可以详细给出读取的文件属性、大小、载入时间等信息，适合与System Usage配合使用。
&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/9.png?raw=true&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Network工具则可以采集到应用的TCP/IP和UDP的使用信息(传输的数据量、当前所有TCP连接等)，用得不多，做网络使用状况分析时用用还行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_13_app/10.png?raw=true&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多阅读
涉及iOS App性能的知识很多，上面只是冰山一角，重点推荐WWDC的session。&lt;/p&gt;

&lt;p&gt;WWDC 2012:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;406: Adopting Automatic Reference Counting&lt;/li&gt;
  &lt;li&gt;238: iOS App Performance: Graphics and Animations&lt;/li&gt;
  &lt;li&gt;242: iOS App Performance: Memory&lt;/li&gt;
  &lt;li&gt;235: iOS App Performance: Responsiveness&lt;/li&gt;
  &lt;li&gt;409: Learning Instruments&lt;/li&gt;
  &lt;li&gt;706: Networking Best Practices&lt;/li&gt;
  &lt;li&gt;514: OpenGL ES Tools and Techniques&lt;/li&gt;
  &lt;li&gt;506: Optimizing 2D Graphics and Animation Performance&lt;/li&gt;
  &lt;li&gt;601: Optimizing Web Content in UIWebViews and Websites on iOS&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;225: Up and Running: Making a Great Impression with Every Launch
WWDC 2011:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;105: Polishing Your App: Tips and tricks to improve the responsiveness and * performance&lt;/li&gt;
  &lt;li&gt;121: Understanding UIKit Rendering&lt;/li&gt;
  &lt;li&gt;131 performance optimization on iphone os&lt;/li&gt;
  &lt;li&gt;308: Blocks and Grand Central Dispatch in Practice&lt;/li&gt;
  &lt;li&gt;323: Introducing Automatic Reference Counting&lt;/li&gt;
  &lt;li&gt;312: iOS Performance and Power Optimization with Instruments
还有几篇不错的blog：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/&quot;&gt;http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/&quot;&gt;http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance&quot;&gt;http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/&quot;&gt;http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 13 Jul 2015 00:00:00 +0800</pubDate>
				<link>/2015/07/13/1iOS%20App%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</link>
				<guid isPermaLink="true">/2015/07/13/1iOS%20App%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</guid>
			</item>
		
			<item>
				<title>利用python爬妹子图</title>
				<description>&lt;p&gt;看了几天的python,发现python的语法确实简单。今天了解了一下python写爬虫，在这里记录一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_30_python/1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先 我们要下载pycharm&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/&quot;&gt;http://www.jetbrains.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后新建工程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_30_python/2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一种办法
目录如上 rexx.py 是使用正则表达式的方法  meizi.py是使用BeautifulSoup 三方库来实现解析jpg图片链接(早就听说python的第三库多且牛)&lt;/p&gt;

&lt;p&gt;正则表达式我在这就不多描述代码如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_30_python/3.png?raw=true&quot; alt=&quot;&quot; /&gt;
首先里面用到了requests 这个库 。同理我们用时pip install requests安装&lt;/p&gt;

&lt;p&gt;source.txt 是我们把网页源码复制到txt里面解析的（人肉就是 手动操作哈哈！后面会介绍不用自己复制粘贴源码的操作）&lt;/p&gt;

&lt;p&gt;解析完txt文件 使用正则表达式匹配出我们的图片 最终把他写入文件就可以了&lt;/p&gt;

&lt;p&gt;第二种办法
在meizi.py文件里面 代码如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_30_python/4.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里用到了自带的类库 urllib2 以及BeautifulSoup&lt;/p&gt;

&lt;p&gt;当然我们可以把代码复制到txt解析然后处理 但是现在我们现在直接urlopen一个链接&lt;/p&gt;

&lt;p&gt;然后使用BeautifulSoup 处理拿到soup&lt;/p&gt;

&lt;p&gt;使用soup.findall 就可以解析到想到的数据&lt;/p&gt;

&lt;p&gt;BeautifulSoup 的功能比较多大家可以自己百度一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015-7_30_python/5.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是我随便爬的图片 好玩弄的  我这只是做个备注 可能有点乱 有时间会整理下思路，大家随便看看就好。&lt;/p&gt;
</description>
				<pubDate>Sun, 12 Jul 2015 00:00:00 +0800</pubDate>
				<link>/2015/07/12/2%E5%88%A9%E7%94%A8python%E7%88%AC%E5%A6%B9%E5%AD%90%E5%9B%BE.html</link>
				<guid isPermaLink="true">/2015/07/12/2%E5%88%A9%E7%94%A8python%E7%88%AC%E5%A6%B9%E5%AD%90%E5%9B%BE.html</guid>
			</item>
		
			<item>
				<title>使用Reveal 帮助你窥视别人的应用</title>
				<description>&lt;p&gt;今天看到一个微博是虾神的，贴出了一个照片，上面是ios届比较牛逼的前辈，内容是,你要是挖的动，你就牛逼。内容很简单，但是让我心中激荡起了无限涟漪，引用别人的一句话.比我牛逼X倍的人都在努力，你在干什么?&lt;br /&gt;
  回到正题，为了纪录自己的学历历程，坚持做到每天一篇吧。借鉴了那么多前辈们的经验，我想我怎么地也要做做贡献。今天有空看了下Reveal的使用。其实前辈们写的很好，但是可能他们比较高端，写的不够详细，我就啰嗦的写下我是怎么完成的吧。&lt;/p&gt;

&lt;p&gt;1.你要有一台真机，并且是越狱过的。我的是ios7.0系统的ipod touch,关于越狱我就不多说了，我记得1年前我用的盘古一键越狱..一键真的很无脑。&lt;/p&gt;

&lt;p&gt;2.会使用终端用终端，不会用的话 和我一样使用IfunBox(我比较low)。IfunBox的作用就是把一些文件导入到越狱手机里面去。其实就是要把Reveal里的framework导入到手机里。为啥要用IfunBox？因为手机的文件夹不像电脑.不是一样双击就能访问到.. ps：终端也可以完成，暂时不会，需要越狱。&lt;/p&gt;

&lt;p&gt;详细一点嘛就是先从&lt;a href=&quot;http://revealapp.com&quot;&gt;http://revealapp.com&lt;/a&gt; 下载Reveal，下载出来应该是酱紫的
	&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后双击运行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;啥也没有的界面，接着我们就要使用ifunBox了。&lt;/p&gt;

&lt;p&gt;百度ifunbox for mac 下载 安装。
&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/3.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;利用他就可以往手机的文件夹导入东西了。&lt;/p&gt;

&lt;p&gt;导入什么呢？当然是把Reveal里面的关键文件导入进去。&lt;/p&gt;

&lt;p&gt;首先进入啥也没有的Reveal&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/4.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击红色标签部分 看下我们重要的东西是啥，就是两个文件了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/5.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开ifunbox
&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/6.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是我手机的文件夹路径，首先把Reveal.framework导入下面标红的路径里面去
&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/7.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后把libReveal.dylib导入&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/8.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后重启你的手机设备..不要问我怎么重启了…&lt;/p&gt;

&lt;p&gt;再打开你的Reveal就发现
&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/9.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个地方可以点了，进入别人的应用，我选择进入美团&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/10.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这张图是我touch里美团的截图，效果就是这样了。
&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/12.jpeg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次在简书写文章。用我的口头禅就是，我还是个菜鸡，希望大家能够海涵。&lt;/p&gt;

&lt;p&gt;附赠前面提到的图片一张，希望有朝一日你们也能和他们一样被贴在一块。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/2015_7_30_reveal/13.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果还是不ok的 可以留言哈 第一次写,比较啰嗦..有问题大家一块解决。&lt;/p&gt;
</description>
				<pubDate>Sat, 11 Jul 2015 00:00:00 +0800</pubDate>
				<link>/2015/07/11/1-%E4%BD%BF%E7%94%A8Reveal.html</link>
				<guid isPermaLink="true">/2015/07/11/1-%E4%BD%BF%E7%94%A8Reveal.html</guid>
			</item>
		
			<item>
				<title>学习markdown</title>
				<description>&lt;h1 id=&quot;markdown&quot;&gt;学习markdown&lt;/h1&gt;

&lt;p&gt;既然第一篇是如何搭建博客，那么第二篇就写写平时我是如何写博客的吧.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;平时使用的是Markdwon写作，工具是&lt;a href=&quot;http://25.io/mou/&quot;&gt;Mou&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;每次创建好文件&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2015-7-30-学习Markdown.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之后就可以开始写作了界面就像这样&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kekeYe/kekeYe.github.io/blob/master/assets/resources/customimages/destop.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;然后我介绍下重要的Markdown语法吧。我才用一行代码，一行效果的形式，展示常用的语法。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;lets-begin&quot;&gt;&lt;strong&gt;&lt;em&gt;Let’s begin!&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 标签的用法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 我是大标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-1&quot;&gt;我是大标题&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;## 我也是大标题  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;我也是大标题&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;# 我是1级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-3&quot;&gt;我是1级标题&lt;/h1&gt;

&lt;h2 id=&quot;section-4&quot;&gt;我是2级标题&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;我是3级标题&lt;/h3&gt;

&lt;h4 id=&quot;section-6&quot;&gt;我是4级标题&lt;/h4&gt;

&lt;h5 id=&quot;section-7&quot;&gt;我是5级标题&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;###### 我是6级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;section-8&quot;&gt;我是6级标题&lt;/h6&gt;

&lt;h2 id=&quot;section-9&quot;&gt;2. 黑体斜体的用法以及注释的用法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;文字编辑这里可以是黑体 **我是黑体，还是注释**[^zhushi]. *我是斜体* , 点击小标签可以跳转到下面的解释
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字编辑这里可以是黑体 &lt;strong&gt;我是黑体，还是注释&lt;/strong&gt;&lt;sup id=&quot;fnref:zhushi&quot;&gt;&lt;a href=&quot;#fn:zhushi&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;em&gt;我是斜体&lt;/em&gt; , 点击小标签可以跳转到下面的解释&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;3. 引用说明和列表&lt;/h2&gt;

&lt;p&gt;下面介绍引用，使用&amp;gt; 可以让文章处于引用状态.列表可以用多种符号，这里用*&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 引用说明
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;引用说明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;* 列表1
* * 列表2
* * * 列表3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;列表1&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;列表2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ul&gt;
          &lt;li&gt;列表3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种结合起来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; **注意了 引用列表开始了:**
&amp;gt; 
&amp;gt; * 列表1
&amp;gt;	* * 列表2
&amp;gt;	* * * 列表3
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意了 引用列表开始了:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;列表1
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;列表2&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;ul&gt;
                &lt;li&gt;列表3&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-11&quot;&gt;4. 地址链接和图片链接&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;这是[百度](http://www.baidu.com)链接
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;链接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是图片链接  
![](http://img3.imgtn.bdimg.com/it/u=1674609539,3404725154&amp;amp;fm=21&amp;amp;gp=0.jpg) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是图片链接  	
&lt;img src=&quot;http://img3.imgtn.bdimg.com/it/u=1674609539,3404725154&amp;amp;fm=21&amp;amp;gp=0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;5. 代码高亮&lt;/h2&gt;

&lt;p&gt;来一段OC UIKit的代码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
#import &amp;lt;UIKit/UIKitDefines.h&amp;gt;  
#import &amp;lt;UIKit/UIAccelerometer.h&amp;gt;  
#import &amp;lt;UIKit/UIAccessibility.h&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKitDefines.h&amp;gt;  
#import &amp;lt;UIKit/UIAccelerometer.h&amp;gt;  
#import &amp;lt;UIKit/UIAccessibility.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;帮助    &lt;code&gt;Cmd + /&lt;/code&gt; &lt;br /&gt;
同步文档    &lt;code&gt;Cmd + S&lt;/code&gt;&lt;br /&gt;
创建文档    &lt;code&gt;Cmd + Opt + N&lt;/code&gt;&lt;br /&gt;
最大化编辑器    &lt;code&gt;Cmd + Enter&lt;/code&gt;&lt;br /&gt;
预览文档 &lt;code&gt;Cmd + Opt + Enter&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;6.分割线&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;------
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;***
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-14&quot;&gt;7.我学习的网站，和工具&lt;/h2&gt;

&lt;h5 id=&quot;markdown-1&quot;&gt;markdown在线工具&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://stackedit.io/editor&quot;&gt;https://stackedit.io/editor&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://typora.io&quot;&gt;http://typora.io&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://joehill.me/2015/07/27/2015-07-27-Markdown-Typora/&quot;&gt;http://joehill.me/2015/07/27/2015-07-27-Markdown-Typora/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://maxiang.info/#欢迎使用马克飞象&quot;&gt;http://maxiang.info/#欢迎使用马克飞象&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;chrome-extension://oknndfeeopgpibecfjljjfanledpbkog/index.html#&quot;&gt;chrome-extension://oknndfeeopgpibecfjljjfanledpbkog/index.html#
&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;markdown-2&quot;&gt;markdown语法&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/basic.html&quot;&gt;http://wowubuntu.com/markdown/basic.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/23&quot;&gt;http://www.ituring.com.cn/article/23&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zipperary.com/2013/05/22/introduction-to-markdown/&quot;&gt;http://zipperary.com/2013/05/22/introduction-to-markdown/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/20962496&quot;&gt;http://www.zhihu.com/question/20962496&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/12/0421/09/1016783_205350218.shtml&quot;&gt;http://www.360doc.com/content/12/0421/09/1016783_205350218.shtml&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tips-&quot;&gt;8. 小tips 持续跟新&lt;/h2&gt;

&lt;p&gt;邮箱：&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#121;&amp;#101;&amp;#098;&amp;#105;&amp;#110;&amp;#051;&amp;#056;&amp;#051;&amp;#056;&amp;#057;&amp;#048;&amp;#050;&amp;#057;&amp;#064;&amp;#113;&amp;#113;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#121;&amp;#101;&amp;#098;&amp;#105;&amp;#110;&amp;#051;&amp;#056;&amp;#051;&amp;#056;&amp;#057;&amp;#048;&amp;#050;&amp;#057;&amp;#064;&amp;#113;&amp;#113;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:zhushi&quot;&gt;
      &lt;p&gt;&lt;strong&gt;我是解释，解释上面的内容&lt;/strong&gt;. &lt;a href=&quot;#fnref:zhushi&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Fri, 10 Jul 2015 00:00:00 +0800</pubDate>
				<link>/2015/07/10/0%E5%AD%A6%E4%B9%A0Markdown.html</link>
				<guid isPermaLink="true">/2015/07/10/0%E5%AD%A6%E4%B9%A0Markdown.html</guid>
			</item>
		
			<item>
				<title>纪录这个Blog是怎么诞生的</title>
				<description>&lt;h1 id=&quot;blog&quot;&gt;纪录这个Blog是怎么诞生的&lt;/h1&gt;

&lt;p&gt;大概每个博客的第一篇文章都是这个吧，接触iOS开发两年多了第一次想到写自己的博客,说来惭愧，一开始学别人搭建wordpress，心血来潮的买了个域名，一看到要备案神马的,果断放弃了。接着无意间发现&lt;a href=&quot;http://www.jianshu.com/users/b5709961b8e7/latest_articles&quot;&gt;简书&lt;/a&gt;是个不错的平台，全屏幕白色非常适合我的感觉，写了大概10多篇博客,发现 虽然他是个写博客不错的平台但是感觉还是不够符合我们程序员的style，想来想去还是觉得git更贴切了。废话了那么多,接下来 我就介绍下我是怎么搭建这个博客的吧。我也练习一下&lt;strong&gt;MarkDown&lt;/strong&gt;的各种方法。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;主要步骤&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;创建自己的github&lt;/li&gt;
  &lt;li&gt;新建gitpages&lt;/li&gt;
  &lt;li&gt;下载jekyll 找到符合自己Style的模版&lt;/li&gt;
  &lt;li&gt;修改模版 让自己看起来&lt;strong&gt;叼叼&lt;/strong&gt;的&lt;/li&gt;
  &lt;li&gt;clone自己的项目，编写第一篇博客&lt;/li&gt;
  &lt;li&gt;开始装逼吧！&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;接下来我就按着这个步骤,分别解释下这些操作。&lt;/p&gt;

&lt;p&gt;待跟新..&lt;/p&gt;

</description>
				<pubDate>Thu, 09 Jul 2015 00:00:00 +0800</pubDate>
				<link>/2015/07/09/how_to_start.html</link>
				<guid isPermaLink="true">/2015/07/09/how_to_start.html</guid>
			</item>
		
	</channel>
</rss>
